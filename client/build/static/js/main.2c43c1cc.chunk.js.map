{"version":3,"sources":["components/Home.js","utils/axiosWithAuth.js","components/Login.js","components/PrivateRoute.js","components/Friends.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","to","axiosWithAuth","token","JSON","parse","localStorage","getItem","axios","create","headers","Authorization","baseURL","Login","useState","username","password","login","setLogin","buttonEnable","setButtonEnable","handleChange","event","target","name","value","length","className","onSubmit","preventDefault","post","then","res","setItem","stringify","data","payload","history","push","catch","err","console","log","htmlFor","type","onChange","disabled","PrivateRoute","Component","component","rest","render","Friends","setFriends","id","setId","age","email","useEffect","get","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oQAeeA,EAZF,SAAAC,GAET,OACI,6BACI,uDACA,kBAAC,IAAD,CAAMC,GAAG,UACL,8C,uCCPHC,EAAgB,WAE3B,IAAMC,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,UAC9C,OAAOC,IAAMC,OAAO,CAClBC,QAAS,CACPC,cAAeR,GAEjBS,QAAS,MCwCEC,EA5CD,SAACb,GAAW,IAAD,EAGKc,mBAAS,CAAEC,SAAU,GAAIC,SAAU,KAHxC,mBAGdC,EAHc,KAGPC,EAHO,OAImBJ,oBAAS,GAJ5B,mBAIdK,EAJc,KAIAC,EAJA,KAMfC,EAAe,SAAAC,GACjBJ,EAAS,eAAKD,EAAN,eAAcK,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,SACnDR,EAAMF,SAASW,OAAO,GAAKT,EAAMD,SAASU,OAAO,GACjDN,GAAgB,IAiBxB,OACI,6BACI,qCACA,0BAAMO,UAAU,OAAOC,SAfX,SAAAN,GAChBA,EAAMO,iBACN3B,IACK4B,KAAK,aAAcb,GACnBc,MAAK,SAAAC,GACF1B,aAAa2B,QAAQ,QAAS7B,KAAK8B,UAAUF,EAAIG,KAAKC,UACvDpC,EAAMqC,QAAQC,KAAK,iBAErBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,CAAEF,aAQxB,2BAAOG,QAAQ,YAAf,YAEA,2BAAOnB,KAAK,WAAWoB,KAAK,OAAOC,SAAUxB,KAE7C,2BAAOsB,QAAQ,YAAf,YAEA,2BAAOnB,KAAK,WAAWoB,KAAK,WAAWC,SAAUxB,KAEjD,2BAAOyB,SAAU3B,EAAcQ,UAAU,SAASH,KAAK,SAASoB,KAAK,c,QCtBtEG,EAdM,SAAC,GAAuC,IAA1BC,EAAyB,EAApCC,UAAyBC,EAAW,6BAC1D,OACE,kBAAC,IAAD,iBACMA,EADN,CAEEC,OAAQ,SAAAnD,GACN,OAAIM,aAAaC,QAAQ,SAChB,kBAACyC,EAAchD,GAEf,kBAAC,IAAD,CAAUC,GAAG,gBC4DfmD,EAtEC,SAAApD,GAAQ,MAEUc,mBAAS,IAFnB,mBAEJuC,GAFI,aAIAvC,qBAJA,mBAIbwC,EAJa,KAITC,EAJS,OAMczC,mBAAS,CAACwC,GAAGA,EAAI9B,KAAK,GAAIgC,IAAI,GAAIC,MAAM,KANtD,gCAOoB3C,oBAAS,IAP7B,6BASpB4C,qBAAU,WACNxD,IACCyD,IAAI,gBACJ5B,MAAK,SAAAC,GACFqB,EAAWrB,EAAIG,MACfoB,EAAMvB,EAAIG,KAAKT,OAAO,MAEzBa,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,CAAEF,aAC9B,K,MCaSoB,MA1Bf,WACE,OACE,kBAAC,IAAD,KACA,yBAAKjC,UAAU,OACX,yBAAKA,UAAU,OACb,wBAAIA,UAAU,WACZ,4BACE,kBAAC,IAAD,CAAM1B,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,cAAT,mBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,KAAT,WAKN,kBAAC,IAAD,CAAO4D,OAAK,EAACC,KAAK,IAAIb,UAAWlD,IACjC,kBAAC,IAAD,CAAO+D,KAAK,SAASb,UAAWpC,IAChC,kBAAC,EAAD,CAAcgD,OAAK,EAACC,KAAK,aAAab,UAAWG,OCjBrCW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASjB,OACP,kBAAC,IAAMkB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdrC,OAAM,SAAAsC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.2c43c1cc.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom'\n\nconst Home = props =>{\n\n    return(\n        <div>\n            <h1>Welcome to Auth Friends</h1>\n            <Link to=\"/login\">\n                <button>Log In!</button>\n            </Link>\n        </div>\n    )\n}\n\nexport default Home;","import axios from 'axios';\n\nexport const axiosWithAuth = () => {\n  // returns an \"instance\" of axios, with preconfigured configs\n  const token = JSON.parse(localStorage.getItem('token'));\n  return axios.create({\n    headers: {\n      Authorization: token\n    },\n    baseURL: ''\n  });\n};\n","import React, { useState } from 'react';\nimport axios from 'axios';\n\nimport { axiosWithAuth } from '../utils/axiosWithAuth.js'\n\nconst Login = (props) => {\n\n\n    const [login, setLogin] = useState({ username: '', password: '' })\n    const [buttonEnable, setButtonEnable] = useState(true)\n   \n    const handleChange = event => {\n        setLogin({ ...login, [event.target.name]: event.target.value })\n        if( login.username.length>0 && login.password.length>0 ){\n            setButtonEnable(false)}\n    };\n\n    \n\n    const submitLogin = event => {\n        event.preventDefault();\n        axiosWithAuth()\n            .post('/api/login', login)\n            .then(res => {\n                localStorage.setItem('token', JSON.stringify(res.data.payload));\n               props.history.push('/protected');\n            })\n            .catch(err => console.log({ err }));\n\n    }\n\n    return (\n        <div>\n            <h3>Login</h3>\n            <form className='form' onSubmit={submitLogin}>\n                <label htmlFor=\"username\">\n                    Username:\n                <input name='username' type=\"text\" onChange={handleChange} />\n                </label>\n                <label htmlFor=\"password\">\n                    Password:\n                <input name='password' type=\"password\" onChange={handleChange} />\n                </label>\n                <input disabled={buttonEnable} className='submit' name='submit' type='submit' />\n            </form>\n        </div>\n    )\n}\n\nexport default Login;","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n// Requirements:\n// 1. It has the same API as <Route />.\n// 2. It renders a <Route /> and passes all the props through to it.\n// 3. It checks if the user is authenticated, if they are, it renders\n// the “component” prop. If not, it redirects the user to /login.\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={props => {\n        if (localStorage.getItem(\"token\")) {\n          return <Component {...props} />; // render component passed into props\n        } else {\n          return <Redirect to=\"/login\" />;\n        }\n      }}\n    />\n  );\n};\nexport default PrivateRoute;\n","import React, { useState, useEffect } from 'react';\nimport { axiosWithAuth } from '../utils/axiosWithAuth.js'\n\nimport Friend from './Friend.js';\n\nconst Friends = props =>{\n    //state for friends, get data from API\n    const [friends, setFriends] = useState([])\n    //state for id for addFriend\n    const [id, setId] = useState()\n    //state for form to add a friend\n    const [addFriend, setAddFriend] = useState({id:id, name:'', age:'', email:''});\n    const [buttonEnable, setButtonEnable] = useState(true)\n    //get data on render\n    useEffect(()=>{\n        axiosWithAuth()\n        .get('/api/friends')\n        .then(res => {\n            setFriends(res.data)\n            setId(res.data.length+1)\n        })\n        .catch(err => console.log({ err }));\n    },[])\n    \n    //handles form changes and makes sure they are inputted to before submitting\n     const handleChange = event => {\n        setAddFriend({ ...addFriend, [event.target.name]: event.target.value })\n        if( addFriend.name.length>0 && addFriend.age.length>0 && addFriend.email.length>0 ){\n            setButtonEnable(false)}\n    };\n    //deletes a selected friend through .delete request\n    const deleteFriend = id =>{\n        axiosWithAuth()\n        .delete(`/api/friends/${id}`)\n        .then(res => setFriends(res.data))\n        .catch(err => console.log(err))\n    }\n    //returns an array of friend cards\n    const makeFriendsCards = ()=>{\n       return friends.map(element => <Friend friend={element} setFriends={setFriends} deleteFriend={deleteFriend} key={element.id}/>)\n    }\n    //submits a new friend through a .post request\n    const submitFriend = event =>{\n        event.preventDefault()\n        axiosWithAuth()\n        .post('/api/friends', addFriend)\n        .then(res => setFriends(res.data))\n        .catch(err => console.log(err))\n    }\n\n    return(\n        //renders friends card and a form to add a friends\n        <div className='friends-container'>\n            {makeFriendsCards()}\n            <h3>Add a Friend</h3>\n            <form className='form' onSubmit={submitFriend}>\n                <label htmlFor=\"name\">\n                    Name:\n                <input name='name' type=\"text\" onChange={handleChange} />\n                </label>\n                <label htmlFor=\"age\">\n                    Age:\n                <input name='age' type=\"text\" onChange={handleChange} />\n                </label>\n                <label htmlFor=\"name\">\n                    Email:\n                <input name='email' type=\"email\" onChange={handleChange} />\n                </label>\n                <input disabled={buttonEnable} className='submit-friend-button' name='submit' type='submit' />\n\n            </form>\n        </div>\n    )\n}\n\nexport default Friends;","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nimport Home from './components/Home.js';\nimport Login from './components/Login.js';\nimport PrivateRoute from './components/PrivateRoute.js';\nimport Friends from './components/Friends.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n        <nav className='Nav'>\n          <ul className='NavList'>\n            <li>\n              <Link to=\"/login\">Login</Link>\n            </li>\n            <li>\n              <Link to=\"/protected\">Protected Page</Link>\n            </li>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Route exact path='/' component={Home}/>\n        <Route path='/login' component={Login}/>\n        <PrivateRoute exact path=\"/protected\" component={Friends}/>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}